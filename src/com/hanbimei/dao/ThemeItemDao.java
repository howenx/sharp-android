package com.hanbimei.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hanbimei.entity.ThemeItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THEME_ITEM".
*/
public class ThemeItemDao extends AbstractDao<ThemeItem, Long> {

    public static final String TABLENAME = "THEME_ITEM";

    /**
     * Properties of entity ThemeItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ThemeId = new Property(1, Integer.class, "themeId", false, "THEME_ID");
        public final static Property ItemId = new Property(2, Integer.class, "itemId", false, "ITEM_ID");
        public final static Property ItemImg = new Property(3, String.class, "itemImg", false, "ITEM_IMG");
        public final static Property ItemUrl = new Property(4, String.class, "itemUrl", false, "ITEM_URL");
        public final static Property ItemTitle = new Property(5, String.class, "itemTitle", false, "ITEM_TITLE");
        public final static Property ItemPrice = new Property(6, Integer.class, "itemPrice", false, "ITEM_PRICE");
        public final static Property ItemCostPrice = new Property(7, Integer.class, "itemCostPrice", false, "ITEM_COST_PRICE");
        public final static Property ItemDiscount = new Property(8, Integer.class, "itemDiscount", false, "ITEM_DISCOUNT");
        public final static Property ItemSoldAmount = new Property(9, Integer.class, "itemSoldAmount", false, "ITEM_SOLD_AMOUNT");
        public final static Property OrMasterItem = new Property(10, Boolean.class, "orMasterItem", false, "OR_MASTER_ITEM");
        public final static Property CollectCount = new Property(11, Integer.class, "collectCount", false, "COLLECT_COUNT");
        public final static Property MasterItemTag = new Property(12, String.class, "masterItemTag", false, "MASTER_ITEM_TAG");
        public final static Property MasterItemImg = new Property(13, String.class, "masterItemImg", false, "MASTER_ITEM_IMG");
        public final static Property OnShelvesAt = new Property(14, String.class, "onShelvesAt", false, "ON_SHELVES_AT");
        public final static Property OffShelvesAt = new Property(15, String.class, "offShelvesAt", false, "OFF_SHELVES_AT");
    };


    public ThemeItemDao(DaoConfig config) {
        super(config);
    }
    
    public ThemeItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THEME_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"THEME_ID\" INTEGER," + // 1: themeId
                "\"ITEM_ID\" INTEGER," + // 2: itemId
                "\"ITEM_IMG\" TEXT," + // 3: itemImg
                "\"ITEM_URL\" TEXT," + // 4: itemUrl
                "\"ITEM_TITLE\" TEXT," + // 5: itemTitle
                "\"ITEM_PRICE\" INTEGER," + // 6: itemPrice
                "\"ITEM_COST_PRICE\" INTEGER," + // 7: itemCostPrice
                "\"ITEM_DISCOUNT\" INTEGER," + // 8: itemDiscount
                "\"ITEM_SOLD_AMOUNT\" INTEGER," + // 9: itemSoldAmount
                "\"OR_MASTER_ITEM\" INTEGER," + // 10: orMasterItem
                "\"COLLECT_COUNT\" INTEGER," + // 11: collectCount
                "\"MASTER_ITEM_TAG\" TEXT," + // 12: masterItemTag
                "\"MASTER_ITEM_IMG\" TEXT," + // 13: masterItemImg
                "\"ON_SHELVES_AT\" TEXT," + // 14: onShelvesAt
                "\"OFF_SHELVES_AT\" TEXT);"); // 15: offShelvesAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THEME_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ThemeItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer themeId = entity.getThemeId();
        if (themeId != null) {
            stmt.bindLong(2, themeId);
        }
 
        Integer itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindLong(3, itemId);
        }
 
        String itemImg = entity.getItemImg();
        if (itemImg != null) {
            stmt.bindString(4, itemImg);
        }
 
        String itemUrl = entity.getItemUrl();
        if (itemUrl != null) {
            stmt.bindString(5, itemUrl);
        }
 
        String itemTitle = entity.getItemTitle();
        if (itemTitle != null) {
            stmt.bindString(6, itemTitle);
        }
 
        Integer itemPrice = entity.getItemPrice();
        if (itemPrice != null) {
            stmt.bindLong(7, itemPrice);
        }
 
        Integer itemCostPrice = entity.getItemCostPrice();
        if (itemCostPrice != null) {
            stmt.bindLong(8, itemCostPrice);
        }
 
        Integer itemDiscount = entity.getItemDiscount();
        if (itemDiscount != null) {
            stmt.bindLong(9, itemDiscount);
        }
 
        Integer itemSoldAmount = entity.getItemSoldAmount();
        if (itemSoldAmount != null) {
            stmt.bindLong(10, itemSoldAmount);
        }
 
        Boolean orMasterItem = entity.getOrMasterItem();
        if (orMasterItem != null) {
            stmt.bindLong(11, orMasterItem ? 1L: 0L);
        }
 
        Integer collectCount = entity.getCollectCount();
        if (collectCount != null) {
            stmt.bindLong(12, collectCount);
        }
 
        String masterItemTag = entity.getMasterItemTag();
        if (masterItemTag != null) {
            stmt.bindString(13, masterItemTag);
        }
 
        String masterItemImg = entity.getMasterItemImg();
        if (masterItemImg != null) {
            stmt.bindString(14, masterItemImg);
        }
 
        String onShelvesAt = entity.getOnShelvesAt();
        if (onShelvesAt != null) {
            stmt.bindString(15, onShelvesAt);
        }
 
        String offShelvesAt = entity.getOffShelvesAt();
        if (offShelvesAt != null) {
            stmt.bindString(16, offShelvesAt);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ThemeItem readEntity(Cursor cursor, int offset) {
        ThemeItem entity = new ThemeItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // themeId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // itemId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itemImg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // itemUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // itemTitle
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // itemPrice
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // itemCostPrice
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // itemDiscount
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // itemSoldAmount
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // orMasterItem
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // collectCount
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // masterItemTag
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // masterItemImg
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // onShelvesAt
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // offShelvesAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ThemeItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setThemeId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setItemId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setItemImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItemUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setItemTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setItemPrice(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setItemCostPrice(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setItemDiscount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setItemSoldAmount(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOrMasterItem(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setCollectCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setMasterItemTag(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMasterItemImg(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOnShelvesAt(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOffShelvesAt(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ThemeItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ThemeItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
