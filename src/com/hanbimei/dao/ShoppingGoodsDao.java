package com.hanbimei.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hanbimei.entity.ShoppingGoods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOPPING_GOODS".
*/
public class ShoppingGoodsDao extends AbstractDao<ShoppingGoods, Long> {

    public static final String TABLENAME = "SHOPPING_GOODS";

    /**
     * Properties of entity ShoppingGoods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CartId = new Property(1, Integer.class, "cartId", false, "CART_ID");
        public final static Property GoodsId = new Property(2, Integer.class, "goodsId", false, "GOODS_ID");
        public final static Property GoodsImg = new Property(3, String.class, "goodsImg", false, "GOODS_IMG");
        public final static Property GoodsUrl = new Property(4, String.class, "goodsUrl", false, "GOODS_URL");
        public final static Property GoodsName = new Property(5, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property GoodsPrice = new Property(6, Integer.class, "goodsPrice", false, "GOODS_PRICE");
        public final static Property IsChecked = new Property(7, Boolean.class, "isChecked", false, "IS_CHECKED");
        public final static Property State = new Property(8, String.class, "state", false, "STATE");
        public final static Property GoodsNums = new Property(9, Integer.class, "goodsNums", false, "GOODS_NUMS");
        public final static Property ItemColor = new Property(10, String.class, "itemColor", false, "ITEM_COLOR");
        public final static Property ItemSize = new Property(11, String.class, "itemSize", false, "ITEM_SIZE");
        public final static Property ShipFee = new Property(12, Integer.class, "shipFee", false, "SHIP_FEE");
        public final static Property DelUrl = new Property(13, String.class, "delUrl", false, "DEL_URL");
        public final static Property InvArea = new Property(14, String.class, "invArea", false, "INV_AREA");
        public final static Property RestrictAmount = new Property(15, Integer.class, "restrictAmount", false, "RESTRICT_AMOUNT");
        public final static Property RestAmount = new Property(16, Integer.class, "restAmount", false, "REST_AMOUNT");
    };


    public ShoppingGoodsDao(DaoConfig config) {
        super(config);
    }
    
    public ShoppingGoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOPPING_GOODS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CART_ID\" INTEGER," + // 1: cartId
                "\"GOODS_ID\" INTEGER," + // 2: goodsId
                "\"GOODS_IMG\" TEXT," + // 3: goodsImg
                "\"GOODS_URL\" TEXT," + // 4: goodsUrl
                "\"GOODS_NAME\" TEXT," + // 5: goodsName
                "\"GOODS_PRICE\" INTEGER," + // 6: goodsPrice
                "\"IS_CHECKED\" INTEGER," + // 7: isChecked
                "\"STATE\" TEXT," + // 8: state
                "\"GOODS_NUMS\" INTEGER," + // 9: goodsNums
                "\"ITEM_COLOR\" TEXT," + // 10: itemColor
                "\"ITEM_SIZE\" TEXT," + // 11: itemSize
                "\"SHIP_FEE\" INTEGER," + // 12: shipFee
                "\"DEL_URL\" TEXT," + // 13: delUrl
                "\"INV_AREA\" TEXT," + // 14: invArea
                "\"RESTRICT_AMOUNT\" INTEGER," + // 15: restrictAmount
                "\"REST_AMOUNT\" INTEGER);"); // 16: restAmount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOPPING_GOODS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShoppingGoods entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cartId = entity.getCartId();
        if (cartId != null) {
            stmt.bindLong(2, cartId);
        }
 
        Integer goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindLong(3, goodsId);
        }
 
        String goodsImg = entity.getGoodsImg();
        if (goodsImg != null) {
            stmt.bindString(4, goodsImg);
        }
 
        String goodsUrl = entity.getGoodsUrl();
        if (goodsUrl != null) {
            stmt.bindString(5, goodsUrl);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(6, goodsName);
        }
 
        Integer goodsPrice = entity.getGoodsPrice();
        if (goodsPrice != null) {
            stmt.bindLong(7, goodsPrice);
        }
 
        Boolean isChecked = entity.getIsChecked();
        if (isChecked != null) {
            stmt.bindLong(8, isChecked ? 1L: 0L);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(9, state);
        }
 
        Integer goodsNums = entity.getGoodsNums();
        if (goodsNums != null) {
            stmt.bindLong(10, goodsNums);
        }
 
        String itemColor = entity.getItemColor();
        if (itemColor != null) {
            stmt.bindString(11, itemColor);
        }
 
        String itemSize = entity.getItemSize();
        if (itemSize != null) {
            stmt.bindString(12, itemSize);
        }
 
        Integer shipFee = entity.getShipFee();
        if (shipFee != null) {
            stmt.bindLong(13, shipFee);
        }
 
        String delUrl = entity.getDelUrl();
        if (delUrl != null) {
            stmt.bindString(14, delUrl);
        }
 
        String invArea = entity.getInvArea();
        if (invArea != null) {
            stmt.bindString(15, invArea);
        }
 
        Integer restrictAmount = entity.getRestrictAmount();
        if (restrictAmount != null) {
            stmt.bindLong(16, restrictAmount);
        }
 
        Integer restAmount = entity.getRestAmount();
        if (restAmount != null) {
            stmt.bindLong(17, restAmount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ShoppingGoods readEntity(Cursor cursor, int offset) {
        ShoppingGoods entity = new ShoppingGoods( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cartId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // goodsId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goodsImg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // goodsUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // goodsName
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // goodsPrice
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isChecked
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // state
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // goodsNums
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // itemColor
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // itemSize
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // shipFee
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // delUrl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // invArea
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // restrictAmount
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16) // restAmount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ShoppingGoods entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCartId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGoodsId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setGoodsImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoodsUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoodsName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGoodsPrice(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsChecked(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setState(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGoodsNums(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setItemColor(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setItemSize(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setShipFee(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setDelUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setInvArea(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRestrictAmount(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setRestAmount(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ShoppingGoods entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ShoppingGoods entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
