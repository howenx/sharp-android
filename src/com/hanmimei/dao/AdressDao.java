package com.hanmimei.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hanmimei.entity.Adress;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADRESS".
*/
public class AdressDao extends AbstractDao<Adress, Long> {

    public static final String TABLENAME = "ADRESS";

    /**
     * Properties of entity Adress.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Adress_id = new Property(1, Integer.class, "adress_id", false, "ADRESS_ID");
        public final static Property User_id = new Property(2, Integer.class, "user_id", false, "USER_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property City = new Property(4, String.class, "city", false, "CITY");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Adress = new Property(6, String.class, "adress", false, "ADRESS");
        public final static Property Other = new Property(7, String.class, "other", false, "OTHER");
    };


    public AdressDao(DaoConfig config) {
        super(config);
    }
    
    public AdressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADRESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ADRESS_ID\" INTEGER," + // 1: adress_id
                "\"USER_ID\" INTEGER," + // 2: user_id
                "\"NAME\" TEXT," + // 3: name
                "\"CITY\" TEXT," + // 4: city
                "\"PHONE\" TEXT," + // 5: phone
                "\"ADRESS\" TEXT," + // 6: adress
                "\"OTHER\" TEXT);"); // 7: other
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADRESS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Adress entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer adress_id = entity.getAdress_id();
        if (adress_id != null) {
            stmt.bindLong(2, adress_id);
        }
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(3, user_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String adress = entity.getAdress();
        if (adress != null) {
            stmt.bindString(7, adress);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(8, other);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Adress readEntity(Cursor cursor, int offset) {
        Adress entity = new Adress( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // adress_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // city
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // adress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // other
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Adress entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdress_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAdress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOther(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Adress entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Adress entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
