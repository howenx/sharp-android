package com.hanmimei.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hanmimei.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property UserImg = new Property(3, String.class, "userImg", false, "USER_IMG");
        public final static Property IsBind = new Property(4, Boolean.class, "isBind", false, "IS_BIND");
        public final static Property Token = new Property(5, String.class, "token", false, "TOKEN");
        public final static Property Expired = new Property(6, String.class, "expired", false, "EXPIRED");
        public final static Property Last_login = new Property(7, String.class, "last_login", false, "LAST_LOGIN");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property Sex = new Property(9, String.class, "sex", false, "SEX");
        public final static Property CouponCount = new Property(10, Integer.class, "couponCount", false, "COUPON_COUNT");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"USER_IMG\" TEXT," + // 3: userImg
                "\"IS_BIND\" INTEGER," + // 4: isBind
                "\"TOKEN\" TEXT," + // 5: token
                "\"EXPIRED\" TEXT," + // 6: expired
                "\"LAST_LOGIN\" TEXT," + // 7: last_login
                "\"PHONE\" TEXT," + // 8: phone
                "\"SEX\" TEXT," + // 9: sex
                "\"COUPON_COUNT\" INTEGER);"); // 10: couponCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userImg = entity.getUserImg();
        if (userImg != null) {
            stmt.bindString(4, userImg);
        }
 
        Boolean isBind = entity.getIsBind();
        if (isBind != null) {
            stmt.bindLong(5, isBind ? 1L: 0L);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(6, token);
        }
 
        String expired = entity.getExpired();
        if (expired != null) {
            stmt.bindString(7, expired);
        }
 
        String last_login = entity.getLast_login();
        if (last_login != null) {
            stmt.bindString(8, last_login);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        Integer couponCount = entity.getCouponCount();
        if (couponCount != null) {
            stmt.bindLong(11, couponCount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userImg
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isBind
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // token
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // expired
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // last_login
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sex
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // couponCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsBind(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setToken(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExpired(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLast_login(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCouponCount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
