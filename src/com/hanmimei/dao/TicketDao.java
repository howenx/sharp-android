package com.hanmimei.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hanmimei.entity.Ticket;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TICKET".
*/
public class TicketDao extends AbstractDao<Ticket, Long> {

    public static final String TABLENAME = "TICKET";

    /**
     * Properties of entity Ticket.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ticket_id = new Property(1, Integer.class, "ticket_id", false, "TICKET_ID");
        public final static Property Cut_price = new Property(2, Integer.class, "cut_price", false, "CUT_PRICE");
        public final static Property More_price = new Property(3, Integer.class, "more_price", false, "MORE_PRICE");
        public final static Property Use_date = new Property(4, String.class, "use_date", false, "USE_DATE");
        public final static Property Whats = new Property(5, String.class, "whats", false, "WHATS");
    };


    public TicketDao(DaoConfig config) {
        super(config);
    }
    
    public TicketDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TICKET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TICKET_ID\" INTEGER," + // 1: ticket_id
                "\"CUT_PRICE\" INTEGER," + // 2: cut_price
                "\"MORE_PRICE\" INTEGER," + // 3: more_price
                "\"USE_DATE\" TEXT," + // 4: use_date
                "\"WHATS\" TEXT);"); // 5: whats
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TICKET\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ticket entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer ticket_id = entity.getTicket_id();
        if (ticket_id != null) {
            stmt.bindLong(2, ticket_id);
        }
 
        Integer cut_price = entity.getCut_price();
        if (cut_price != null) {
            stmt.bindLong(3, cut_price);
        }
 
        Integer more_price = entity.getMore_price();
        if (more_price != null) {
            stmt.bindLong(4, more_price);
        }
 
        String use_date = entity.getUse_date();
        if (use_date != null) {
            stmt.bindString(5, use_date);
        }
 
        String whats = entity.getWhats();
        if (whats != null) {
            stmt.bindString(6, whats);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ticket readEntity(Cursor cursor, int offset) {
        Ticket entity = new Ticket( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ticket_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // cut_price
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // more_price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // use_date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // whats
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ticket entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTicket_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCut_price(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMore_price(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUse_date(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWhats(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ticket entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ticket entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
